<?xml version="1.0" encoding="UTF-8"?>
<info>
  <title>Configuring a New DocBook Project</title>
</info>
<para>
We need to configure our DocBook project dependencies independent
of where we install them on our file system.
Since we usually expect to source-control our
DocBook source and build-scripts, we need to organize our Eclipse
workspace so that file system and OS dependencies don't creep into
source-controlled artifacts.  This is accomplished on most platforms
with soft links and build links.
</para>
<procedure>
<step>
  <para>
  Create a new project to hold the DocBook source.
  The type can be a simple project.
  </para>
</step>
<step>
  <para>
  Make the DocBook and FOP installations
  <emphasis>appear</emphasis> to reside in our project under
  a directory named
  <filename class="directory">softlinks</filename>.  
  Whether copies of those directories need to reside there depends 
  on the OS platform.  
  Linux and  OS X support directory soft links.  Windows does not.
  The Eclipse platform itself supports links for files, but not 
  directories.
  </para>
  <para>
  Linux and OS X users can use the following technique.
  <substeps>
    <step>
      <para>
        Open a terminal to the
        <filename class="directory">softlinks</filename>
        directory.
      </para>
    </step>
    <step>
      <para>
      Run the following command.
         <cmdsynopsis>
            <command>ln -s</command>
            <arg choice="req"><replaceable>path to DocBook installation</replaceable></arg>
            <arg choice="plain">docbook</arg>
         </cmdsynopsis>
      </para>
    </step>
    <step>
      <para>
      Run a similar command for the FOP folder.
         <cmdsynopsis>
            <command>ln -s</command>
            <arg choice="req"><replaceable>path to FOP installation</replaceable></arg>
            <arg choice="plain">fop</arg>
         </cmdsynopsis>
      </para>
    </step>
  </substeps>
  </para>
  <para>
  Windows users must actually copy these folders into their Eclipse
  workspace under the <filename class="directory">softlinks</filename>
  directory.  This is not a very attractive solution.  I wasn't able
  to make the any of the following work in its place.
  </para>
  <itemizedlist>
    <listitem>
      <emphasis>Windows Shortcuts</emphasis> - On a Windows desktop
        or file explorer, a Windows shortcut looks like the real thing.  But it's
        actually a file with an .inf extension.  In the Eclipse workspace, we
        get <filename class="directory">docbook.inf</filename> and
        <filename class="direcotry">fop.inf</filename>.
    </listitem>
    <listitem>
      <emphasis>Eclipse Links</emphasis> - Eclipse provides a linking
        mechanism to refer to files and directories outside the workspace.
        Unfortunately, this linking information is stored in the
        <filename>.project</filename> metadata file that Eclipse uses
        for a project, not in workspace metadata.  Thus it would also
        become source controlled and then imposed on others.
    </listitem>
  </itemizedlist>
</step>
<step>
  <para>
  Copy the build folder of the Starter Kit into your new project.  This
  includes a <filename>build-core.xml</filename> that defines source
  dependencies and sets a few global properties.  The other files
  reference <filename>build-core.xml</filename> and generate specific
  output formats.
  </para>
</step>
<step>
  <para>
  Create the following folders in your new project.
  <itemizedlist>
    <listitem>
      <filename class="directory">images</filename> - used for storing image files.
    </listitem>
    <listitem>
      <filename class="directory">out</filename> - stores generated output for each
      of the output types.
    </listitem>
    <listitem>
      <filename class="directory">src</filename> - the source for your document content.
    </listitem>
  </itemizedlist>
  </para>
</step>
<step>
  <para>
  In most cases, you will want to create a directory for each output type.
  These directories contain files that control the presentation of your documents.
  (The <filename class="directory">src</filename> directory determines the content).
  If you generate PDF output, a 
  <filename class="directory">pdf</filename> folder would
  contain the customization layer.  If you generate HTML or EPUB output, the
  <filename class="directory">html</filename> or 
  <filename class="directory">epub</filename> folder would contain the your
  CSS files.
  </para>
</step>
</procedure>
<para>
  Your ready to start writing your DocBook source!
</para>